

import datetime
import time
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from config import TOKEN, ADMIN_CHAT_ID
from google_sheet import save_order

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
STRENGTH_OPTIONS = ["–õ—ë–≥–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π"]
FLAVORS = ["–í–∏—à–Ω—è", "–õ–∏–º–æ–Ω-–ª–∞–π–º", "–í–∏–Ω–æ–≥—Ä–∞–¥ —Å–æ —Å–ø–µ—Ü–∏—è–º–∏", "–°–ø–µ—Ü–∏–∏", "–ú–∞—Å—Ç–∏–∫–∞", "–ê–ø–µ–ª—å—Å–∏–Ω", "–ö–æ–∫–∞-–∫–æ–ª–∞",
           "–ï–∂–µ–≤–∏–∫–∞-—á–µ—Ä–Ω–∏–∫–∞", "–°–ª–∏–≤–æ—á–Ω—ã–π –ø–∏—Ä–æ–≥", "–ú–∞–Ω–¥–∞—Ä–∏–Ω", "–§—É–Ω–¥—É–∫, —à–æ–∫–æ–ª–∞–¥, –º—è—Ç–∞", "–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç", "–Ø–≥–æ–¥–Ω—ã–π —Å–æ—Ä–±–µ—Ç",
           "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫", "–ß–µ—Ä–Ω–∏–∫–∞", "–ú–∞–ª–∏–Ω–∞", "–ö–æ—Å–º–æ–ø–æ–ª–∏—Ç–∞–Ω", "–ú–∞–Ω–≥–æ", "–õ–∏—á–∏", "–í–∏–Ω–æ–≥—Ä–∞–¥", "–î–≤–æ–π–Ω–æ–µ —è–±–ª–æ–∫–æ", "–ê—Ä–±—É–∑",
           "–ü–µ—Ä—Å–∏–∫", "–ú—è—Ç–Ω–∞—è –∂–≤–∞—á–∫–∞", "–ó–µ–ª–µ–Ω–æ–µ —è–±–ª–æ–∫–æ —Å –º—è—Ç—è–Ω–æ–π", "–í–∏–Ω–æ–≥—Ä–∞–¥–Ω–∞—è –∫—Ä–µ–º-—Å–æ–¥–∞", "–°–º–æ—Ä–æ–¥–∏–Ω–∞"]
MIXES = {
    "mix1": "–ú–∏–∫—Å 1 - –≤–∏—à–Ω—è (90%) + –∏–Ω–¥–∏–π—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∏ (10%)",
    "mix2": "–ú–∏–∫—Å 2 - –∞–ø–µ–ª—å—Å–∏–Ω (40%) + –∫–æ–∫–∞-–∫–æ–ª–∞ (60%)",
    "mix3": "–ú–∏–∫—Å 3 - –µ–∂–µ–≤–∏–∫–∞ (60%) + —Å–ª–∏–≤–æ—á–Ω—ã–π –ø–∏—Ä–æ–≥ (40%)",
    "mix4": "–ú–∏–∫—Å 4 - –∞—Ä–±—É–∑ (80%) + –º—è—Ç–Ω–∞—è –∂–≤–∞—á–∫–∞ (20%)",
    "mix5": "–ú–∏–∫—Å 5 - –ª–∏–º–æ–Ω-–ª–∞–π–º (70%) + –∞–ø–µ–ª—å—Å–∏–Ω (30%)",
    "mix6": "–ú–∏–∫—Å 6 - —á–µ—Ä–Ω–∏–∫–∞ (50%) + –º–∞–ª–∏–Ω–∞ (50%)",
    "mix7": "–ú–∏–∫—Å 7 - —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫ (50%) + –ø–µ—Ä—Å–∏–∫ (40%) + –º–∞—Å—Ç–∏–∫–∞ (10%)"
}
TOWERS = ["R1", "R2", "R3", "R4", "R5", "R6", "R7"]

# –¢–æ–≤–∞—Ä—ã (—Ç–æ–ª—å–∫–æ –∫–∞–ª—å—è–Ω—ã)
products = [
    {"id": 1, "name": "–ö–∞–ª—å—è–Ω", "price": 4000, "category": "–ö–∞–ª—å—è–Ω—ã", "strength": "–õ—ë–≥–∫–∏–π"},
    {"id": 2, "name": "–ö–∞–ª—å—è–Ω", "price": 4500, "category": "–ö–∞–ª—å—è–Ω—ã", "strength": "–°—Ä–µ–¥–Ω–∏–π"},
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_carts = {}
delivery_data = {}  # –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏: tower, apartment, delivery_time, phone
pending_orders = {}  # –•—Ä–∞–Ω–∏—Ç –∑–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {order_id: {user_id, chat_id, message_id, timestamp}}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–ø–æ—Å—Ç–∏ —Å ID –ø—Ä–æ–¥—É–∫—Ç–∞
STRENGTH_PRODUCT_IDS = {
    'light': 1,
    'medium': 2
}


async def show_flavors_menu(update, context, query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–æ–≤/–º–∏–∫—Å–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
    selected_flavors = context.user_data.get('selected_flavors', [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üçì –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å—ã —Ç–∞–±–∞–∫–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n"

    if selected_flavors:
        message += f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_flavors)}\n\n"

    message += "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –º–∏–∫—Å:"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –≤–∫—É—Å–æ–≤ (–≤ 2 –∫–æ–ª–æ–Ω–∫–∏)
    row = []
    for i, flavor in enumerate(FLAVORS):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –≤–∫—É—Å
        is_selected = flavor in selected_flavors
        btn_text = f"‚úÖ {flavor}" if is_selected else flavor

        row.append(InlineKeyboardButton(btn_text, callback_data=f'flavor_{flavor}'))

        # –ö–∞–∂–¥—ã–µ 2 –≤–∫—É—Å–∞ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
    if row:
        keyboard.append(row)

    # –ö–Ω–æ–ø–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö –º–∏–∫—Å–æ–≤
    for mix_id, mix_name in MIXES.items():
        keyboard.append([InlineKeyboardButton(mix_name, callback_data=f'mix_{mix_id}')])

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
    if selected_flavors:
        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –≤–∫—É—Å–æ–≤", callback_data='flavors_done')])

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_strength')])

    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_delivery_menu(update, context, query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∞—à–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –≥–∞–ª–æ—á–∫–∞–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π"""
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    has_delivery_data = all([
        delivery_data.get(user_id, {}).get('tower'),
        delivery_data.get(user_id, {}).get('apartment'),
        delivery_data.get(user_id, {}).get('delivery_time'),
        delivery_data.get(user_id, {}).get('phone')
    ])

    message = "üè¢ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    delivery_info = delivery_data.get(user_id, {})
    if delivery_info.get('tower'):
        message += f"‚úÖ –ë–∞—à–Ω—è: {delivery_info['tower']}\n"
    else:
        message += f"‚ùå –ë–∞—à–Ω—è: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞\n"

    if delivery_info.get('apartment'):
        message += f"‚úÖ –ö–≤–∞—Ä—Ç–∏—Ä–∞: {delivery_info['apartment']}\n"
    else:
        message += f"‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n"

    if delivery_info.get('delivery_time'):
        message += f"‚úÖ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_info['delivery_time']}\n"
    else:
        message += f"‚ùå –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"

    if delivery_info.get('phone'):
        message += f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: {delivery_info['phone']}\n"
    else:
        message += f"‚ùå –¢–µ–ª–µ—Ñ–æ–Ω: –Ω–µ —É–∫–∞–∑–∞–Ω\n"

    message += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    keyboard = []
    # –ö–Ω–æ–ø–∫–∏ –±–∞—à–µ–Ω
    for tower in TOWERS:
        keyboard.append([InlineKeyboardButton(tower, callback_data=f'tower_{tower}')])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    apartment_icon = "‚úÖ üè†" if delivery_info.get('apartment') else "üè†"
    time_icon = "‚úÖ ‚è∞" if delivery_info.get('delivery_time') else "‚è∞"
    phone_icon = "‚úÖ üì±" if delivery_info.get('phone') else "üì±"

    keyboard.append([
        InlineKeyboardButton(f"{apartment_icon} –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã", callback_data='input_apartment'),
        InlineKeyboardButton(f"{time_icon} –í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data='input_time')
    ])

    keyboard.append([
        InlineKeyboardButton(f"{phone_icon} –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data='input_phone')
    ])

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if has_delivery_data:
        keyboard.append([InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é", callback_data='proceed_to_checkout')])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_cart')])

    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üí® –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∫–∞–ª—å—è–Ω–∞", callback_data='hookah_order')],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message:
        await update.message.reply_text(message, reply_markup=reply_markup)
    # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif update.callback_query:
        query = update.callback_query
        await query.edit_message_text(message, reply_markup=reply_markup)


async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ (–∫–≤–∞—Ä—Ç–∏—Ä–∞, –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏, —Ç–µ–ª–µ—Ñ–æ–Ω)"""
    user_id = update.message.from_user.id
    text = update.message.text
    state = context.user_data.get('delivery_state')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if text.lower() in ["/start", "—Å—Ç–∞—Ä—Ç"]:
        await start(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏
    if state == 'waiting_apartment':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—É
        if user_id not in delivery_data:
            delivery_data[user_id] = {}
        delivery_data[user_id]['apartment'] = text

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('delivery_state', None)

        await update.message.reply_text(
            f"‚úÖ –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text}\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data='back_to_delivery')]])
        )

    elif state == 'waiting_time':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
        if user_id not in delivery_data:
            delivery_data[user_id] = {}
        delivery_data[user_id]['delivery_time'] = text

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('delivery_state', None)

        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text}\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data='back_to_delivery')]])
        )

    elif state == 'waiting_phone':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        if user_id not in delivery_data:
            delivery_data[user_id] = {}
        delivery_data[user_id]['phone'] = text

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('delivery_state', None)

        await update.message.reply_text(
            f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text}\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data='back_to_delivery')]])
        )
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¥–æ—Å—Ç–∞–≤–∫–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.message.from_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    if user_id in user_carts:
        del user_carts[user_id]
    if user_id in delivery_data:
        del delivery_data[user_id]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await show_main_menu(
        update,
        context,
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º—É –∑–∞–∫–∞–∑–∞ –∫–∞–ª—å—è–Ω–∞ –≤ –ñ–ö Prime Park!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º."
    )


async def prefill_delivery_data(user_id, last_order_data):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞"""
    if user_id not in delivery_data:
        delivery_data[user_id] = {}

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ
    if not delivery_data[user_id].get('tower') and last_order_data.get('tower'):
        delivery_data[user_id]['tower'] = last_order_data['tower']
    if not delivery_data[user_id].get('apartment') and last_order_data.get('apartment'):
        delivery_data[user_id]['apartment'] = last_order_data['apartment']
    if not delivery_data[user_id].get('phone') and last_order_data.get('phone'):
        delivery_data[user_id]['phone'] = last_order_data['phone']
    if not delivery_data[user_id].get('delivery_time') and last_order_data.get('delivery_time'):
        delivery_data[user_id]['delivery_time'] = last_order_data['delivery_time']


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
    data = query.data
    user_id = query.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if data.startswith('confirm_'):
        order_id = data.split('_')[1]
        await handle_order_confirmation(update, context, 'confirm', order_id)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if data.startswith('cancel_'):
        order_id = data.split('_')[1]
        await handle_order_confirmation(update, context, 'cancel', order_id)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∫–∞–ª—å—è–Ω–∞"
    if data == 'hookah_order':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞
        last_order = context.user_data.get('last_order')

        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞, –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
        if last_order:
            await prefill_delivery_data(user_id, last_order)

        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫—Ä–µ–ø–æ—Å—Ç–µ–π
        light_product = next((p for p in products if p['id'] == STRENGTH_PRODUCT_IDS['light']), None)
        medium_product = next((p for p in products if p['id'] == STRENGTH_PRODUCT_IDS['medium']), None)

        if not light_product or not medium_product:
            await query.answer("‚ùå –ö–∞–ª—å—è–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏
        keyboard = [
            [InlineKeyboardButton(f"–õ—ë–≥–∫–∏–π ({light_product['price']} —Ä—É–±.)", callback_data='strength_light')],
            [InlineKeyboardButton(f"–°—Ä–µ–¥–Ω–∏–π ({medium_product['price']} —Ä—É–±.)", callback_data='strength_medium')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]

        await query.edit_message_text(
            "üåÄ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–ø–æ—Å—Ç—å –∫–∞–ª—å—è–Ω–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–µ–ø–æ—Å—Ç–∏
    elif data.startswith('strength_'):
        strength = data.split('_')[1]
        product_id = STRENGTH_PRODUCT_IDS[strength]

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
        product = next((p for p in products if p['id'] == product_id), None)
        if not product:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–µ–ø–æ—Å—Ç—å –∏ –ø—Ä–æ–¥—É–∫—Ç
        context.user_data['hookah_strength'] = strength
        context.user_data['selected_hookah'] = product_id

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∫—É—Å—ã
        context.user_data['selected_flavors'] = []

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤–∫—É—Å–æ–≤/–º–∏–∫—Å–æ–≤
        await show_flavors_menu(update, context, query)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞
    elif data.startswith('flavor_'):
        flavor = data.split('_')[1]
        selected_flavors = context.user_data.get('selected_flavors', [])

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≤–∫—É—Å
        if flavor in selected_flavors:
            selected_flavors.remove(flavor)
        else:
            selected_flavors.append(flavor)

        context.user_data['selected_flavors'] = selected_flavors

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await show_flavors_menu(update, context, query)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–∫—Å–∞
    elif data.startswith('mix_'):
        mix_id = data.split('_')[1]
        mix_name = MIXES.get(mix_id)

        if not mix_name:
            await query.answer("‚ùå –ú–∏–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        product_id = context.user_data.get('selected_hookah')
        strength = context.user_data.get('hookah_strength')

        if not product_id or not strength:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        product = next((p for p in products if p['id'] == product_id), None)
        if not product:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        strength_text = {
            'light': '–ª—ë–≥–∫–∏–π',
            'medium': '—Å—Ä–µ–¥–Ω–∏–π'
        }.get(strength, strength)

        comment = f"{strength_text}, {mix_name}"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        if user_id not in user_carts:
            user_carts[user_id] = []

        # –ò—â–µ–º —Ç–∞–∫–æ–π –∂–µ –∫–∞–ª—å—è–Ω —Å —Ç–∞–∫–∏–º –∂–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        item_exists = False
        for item in user_carts[user_id]:
            if item['id'] == product_id and item.get('comment') == comment:
                item['quantity'] += 1
                item_exists = True
                break

        if not item_exists:
            user_carts[user_id].append({
                "id": product_id,
                "name": product['name'],
                "price": product['price'],
                "quantity": 1,
                "comment": comment
            })

        await query.answer(f"‚úÖ {mix_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('selected_hookah', None)
        context.user_data.pop('hookah_strength', None)
        context.user_data.pop('selected_flavors', None)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ 1 –∫–∞–ª—å—è–Ω", callback_data='hookah_order'),
                InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data='cart')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            "üçá –ú–∏–∫—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
            reply_markup=reply_markup
        )

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–æ–≤
    elif data == 'flavors_done':
        selected_flavors = context.user_data.get('selected_flavors', [])

        if not selected_flavors:
            await query.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∫—É—Å!")
            return

        product_id = context.user_data.get('selected_hookah')
        strength = context.user_data.get('hookah_strength')

        if not product_id or not strength:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        product = next((p for p in products if p['id'] == product_id), None)
        if not product:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        strength_text = {
            'light': '–ª—ë–≥–∫–∏–π',
            'medium': '—Å—Ä–µ–¥–Ω–∏–π'
        }.get(strength, strength)

        comment = f"{strength_text}, –í–∫—É—Å—ã: {', '.join(selected_flavors)}"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        if user_id not in user_carts:
            user_carts[user_id] = []

        # –ò—â–µ–º —Ç–∞–∫–æ–π –∂–µ –∫–∞–ª—å—è–Ω —Å —Ç–∞–∫–∏–º –∂–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        item_exists = False
        for item in user_carts[user_id]:
            if item['id'] == product_id and item.get('comment') == comment:
                item['quantity'] += 1
                item_exists = True
                break

        if not item_exists:
            user_carts[user_id].append({
                "id": product_id,
                "name": product['name'],
                "price": product['price'],
                "quantity": 1,
                "comment": comment
            })

        await query.answer(f"‚úÖ {product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('selected_hookah', None)
        context.user_data.pop('hookah_strength', None)
        context.user_data.pop('selected_flavors', None)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ 1 –∫–∞–ª—å—è–Ω", callback_data='hookah_order'),
                InlineKeyboardButton("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data='cart')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            "üçá –ö–∞–ª—å—è–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
            reply_markup=reply_markup
        )

    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫—Ä–µ–ø–æ—Å—Ç–∏
    elif data == 'back_to_strength':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—Ä–µ–ø–æ—Å—Ç–∏
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫—Ä–µ–ø–æ—Å—Ç–µ–π
        light_product = next((p for p in products if p['id'] == STRENGTH_PRODUCT_IDS['light']), None)
        medium_product = next((p for p in products if p['id'] == STRENGTH_PRODUCT_IDS['medium']), None)

        if not light_product or not medium_product:
            await query.answer("‚ùå –ö–∞–ª—å—è–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return

        keyboard = [
            [InlineKeyboardButton(f"–õ—ë–≥–∫–∏–π ({light_product['price']} —Ä—É–±.)", callback_data='strength_light')],
            [InlineKeyboardButton(f"–°—Ä–µ–¥–Ω–∏–π ({medium_product['price']} —Ä—É–±.)", callback_data='strength_medium')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]

        await query.edit_message_text(
            "üåÄ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–ø–æ—Å—Ç—å –∫–∞–ª—å—è–Ω–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard))

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
    elif data == 'cart':
        if user_id not in user_carts or not user_carts[user_id]:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
            await query.edit_message_text(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

        total = 0
        message = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        for item in user_carts[user_id]:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            comment = f" ({item['comment']})" if 'comment' in item and item['comment'] else ''
            message += f"‚Ä¢ {item['name']}{comment} - {item['quantity']} —à—Ç. x {item['price']}‚ÇΩ\n"
            total += item['price'] * item['quantity']
        message += f"\nüí∏ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"

        keyboard = [
            [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]

        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))

    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏)
    elif data == 'checkout':
        if user_id not in user_carts or not user_carts[user_id]:
            await query.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏
        await show_delivery_menu(update, context, query)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏
    elif data == 'back_to_cart':
        if user_id not in user_carts or not user_carts[user_id]:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
            await query.edit_message_text(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=InlineKeyboardMarkup(keyboard))
            return

        total = 0
        message = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        for item in user_carts[user_id]:
            comment = f" ({item.get('comment', '')})" if item.get('comment') else ''
            message += f"‚Ä¢ {item['name']}{comment} - {item['quantity']} —à—Ç. x {item['price']}‚ÇΩ\n"
            total += item['price'] * item['quantity']
        message += f"\nüí∏ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"

        keyboard = [
            [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='clear_cart')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]

        await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –¥–æ—Å—Ç–∞–≤–∫–∏
    elif data == 'back_to_delivery':
        await show_delivery_menu(update, context, query)

    # –í—ã–±–æ—Ä –±–∞—à–Ω–∏
    elif data.startswith('tower_'):
        tower = data.split('_')[1]
        if user_id not in delivery_data:
            delivery_data[user_id] = {}
        delivery_data[user_id]['tower'] = tower
        await query.answer(f"‚úÖ –ë–∞—à–Ω—è {tower} –≤—ã–±—Ä–∞–Ω–∞")
        await show_delivery_menu(update, context, query)

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    elif data == 'input_apartment':
        context.user_data['delivery_state'] = 'waiting_apartment'
        await query.edit_message_text(
            "üè† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 302–ì):\n"
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞ –∏ –±—É–∫–≤—É –∫–æ—Ä–ø—É—Å–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_delivery')]])
        )

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    elif data == 'input_time':
        context.user_data['delivery_state'] = 'waiting_time'
        await query.edit_message_text(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01 15:00):\n"
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –ß–ß:–ú–ú",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_delivery')]])
        )

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    elif data == 'input_phone':
        context.user_data['delivery_state'] = 'waiting_phone'
        await query.edit_message_text(
            "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:\n"
            "–ü—Ä–∏–º–µ—Ä: +7 (999) 123-45-67 –∏–ª–∏ 89991234567",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_delivery')]])
        )

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
    elif data == 'proceed_to_checkout':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏
        if user_id not in delivery_data:
            await query.answer("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏!")
            return

        delivery_info = delivery_data[user_id]
        required_fields = ['tower', 'apartment', 'delivery_time', 'phone']
        if not all(delivery_info.get(field) for field in required_fields):
            await query.answer("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏!")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        total = sum(item['price'] * item['quantity'] for item in user_carts[user_id])
        order_data = {
            "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M"),  # –î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
            "delivery_date_time": delivery_info['delivery_time'],  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
            "username": query.from_user.full_name,  # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            "phone": delivery_info['phone'],  # –¢–µ–ª–µ—Ñ–æ–Ω
            "tower": delivery_info['tower'],  # –ë–∞—à–Ω—è
            "apartment": delivery_info['apartment'],  # –ö–≤–∞—Ä—Ç–∏—Ä–∞
            "cart": user_carts[user_id],  # –ö–æ—Ä–∑–∏–Ω–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            "total": total,  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
            "user_id": user_id,  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "username_tg": query.from_user.username or ""  # Telegram username
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        order_id = str(uuid.uuid4())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ Google –¢–∞–±–ª–∏—Ü—É
        try:
            save_order(order_data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            await context.bot.send_message(
                ADMIN_CHAT_ID,
                f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê!\n"
                f"–û—Ç: @{query.from_user.username}\n"
                f"–û—à–∏–±–∫–∞: {str(e)[:200]}"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = (
            f"üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó! ID: {order_id}\n"
            f"–û—Ç: {order_data['username']} (@{order_data['username_tg']})\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone']}\n"
            f"–ë–∞—à–Ω—è: {order_data['tower']}, –ö–≤–∞—Ä—Ç–∏—Ä–∞: {order_data['apartment']}\n"
            f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_date_time']}\n\n"
            f"–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
        )

        for item in order_data['cart']:
            comment = f" ({item['comment']})" if 'comment' in item and item['comment'] else ''
            admin_message += f"‚Ä¢ {item['name']}{comment} - {item['quantity']} —à—Ç. x {item['price']}‚ÇΩ\n"

        admin_message += f"\nüí∏ –ò—Ç–æ–≥–æ: {order_data['total']}‚ÇΩ"

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'confirm_{order_id}'),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f'cancel_{order_id}')
            ]
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        pending_orders[order_id] = {
            'user_id': user_id,
            'chat_id': query.message.chat_id,
            'message_id': query.message.message_id,
            'timestamp': time.time(),
            'order_data': order_data
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ job_queue
        if context.application.job_queue is not None:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ–Ω—ã (900 —Å–µ–∫—É–Ω–¥)
            context.application.job_queue.run_once(
                auto_cancel_order,
                900,
                data=order_id,
                name=f'cancel_{order_id}'
            )
        else:
            print("‚ö†Ô∏è JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ó–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω")
            await context.bot.send_message(
                ADMIN_CHAT_ID,
                f"‚ö†Ô∏è JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ó–∞–∫–∞–∑ {order_id} –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω"
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['last_order'] = {
            'tower': delivery_info['tower'],
            'apartment': delivery_info['apartment'],
            'phone': delivery_info['phone'],
            'delivery_time': delivery_info['delivery_time']
        }

        # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        if user_id in user_carts:
            user_carts[user_id] = []

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (—É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        order_details = "‚è≥ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—ç—Å—Ç—Ä–æ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç) !\n\n"
        order_details += "üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"
        for item in order_data['cart']:
            comment = f" ({item.get('comment', '')})" if item.get('comment') else ''
            order_details += f"‚Ä¢ {item['name']}{comment} - {item['quantity']} —à—Ç. x {item['price']}‚ÇΩ\n"
        order_details += f"\nüí∏ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n"
        order_details += f"üè¢ –ë–∞—à–Ω—è: {order_data['tower']}\n"
        order_details += f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {order_data['apartment']}\n"
        order_details += f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_date_time']}\n"
        order_details += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone']}\n\n"
        order_details += "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º–∞—ç—Å—Ç—Ä–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∑–∞–∫–∞–∑, –º—ã —Å–æ–æ–±—â–∏–º –≤–∞–º!"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∫–ª–∏–µ–Ω—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞—Ç—å –µ—â–µ"
        await query.edit_message_text(
            order_details,
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üîÑ –ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω(—ã) –µ—â–µ —Ä–∞–∑", callback_data='hookah_order'),
                    InlineKeyboardButton("‚úçÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—ç—Å—Ç—Ä–æ", callback_data='contact_hookah_master')
                ]
            ])
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–∞–ª—å—è–Ω—â–∏–∫–æ–º"
    elif data == 'contact_hookah_master':
        user_name = query.from_user.full_name
        username = f"@{query.from_user.username}" if query.from_user.username else "–±–µ–∑ username"

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            ADMIN_CHAT_ID,
            f"üë§ –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞!\n"
            f"–ò–º—è: {user_name}\n"
            f"Username: {username}\n"
            f"ID: {user_id}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )

        await query.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú–∞—ç—Å—Ç—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        order_button = InlineKeyboardButton(
            "üí® –ó–∞–∫–∞–∑–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–∞–ª—å—è–Ω",
            callback_data='hookah_order'
        )

        await query.edit_message_text(
            "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–∞—ç—Å—Ç—Ä–æ!\n"
            "–û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! ‚ù§Ô∏è",
            reply_markup=InlineKeyboardMarkup([[order_button]])
        )

    # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    elif data == 'clear_cart':
        if user_id in user_carts:
            user_carts[user_id] = []
        await show_main_menu(update, context, "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif data == 'back_to_main':
        await show_main_menu(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
    elif data == 'help':
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        await query.edit_message_text(
            "‚ùì –ü–æ–º–æ—â—å:\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üí® –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∫–∞–ª—å—è–Ω–∞' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∑–∞\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–ø–æ—Å—Ç—å –∏ –≤–∫—É—Å—ã\n"
            "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n"
            "4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
            "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–∞—ç—Å—Ç—Ä–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
async def auto_cancel_order(context: ContextTypes.DEFAULT_TYPE):
    order_id = context.job.data
    order_info = pending_orders.get(order_id)

    if not order_info:
        return  # –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω

    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
    del pending_orders[order_id]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await context.bot.send_message(
        chat_id=order_info['chat_id'],
        text="‚è± –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è —É –º–∞—ç—Å—Ç—Ä–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await context.bot.send_message(
        ADMIN_CHAT_ID,
        f"‚ö†Ô∏è –ó–ê–ö–ê–ó –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –û–¢–ú–ï–ù–Å–ù –ü–û –¢–ê–ô–ú–ê–£–¢–£\nID: {order_id}"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
async def handle_order_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str, order_id: str):
    query = update.callback_query
    await query.answer()

    order_info = pending_orders.get(order_id)
    if not order_info:
        await query.edit_message_text("‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ —Å—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç—ë–∫")
        return

    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
    del pending_orders[order_id]

    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–º–µ–Ω—É
    if context.application.job_queue is not None:
        current_jobs = context.application.job_queue.get_jobs_by_name(f'cancel_{order_id}')
        for job in current_jobs:
            job.schedule_removal()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    if action == 'confirm':
        client_message = "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
        admin_status = "–ü–û–î–¢–í–ï–†–ñ–î–Å–ù"
    else:
        client_message = "‚è± –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è —É –º–∞—ç—Å—Ç—Ä–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞–ª—å—è–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"
        admin_status = "–û–¢–ú–ï–ù–Å–ù"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç—É
    await context.bot.send_message(
        chat_id=order_info['chat_id'],
        text=client_message
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    original_text = query.message.text
    new_text = f"{original_text}\n\n---\n–°–¢–ê–¢–£–°: {admin_status} –º–∞—ç—Å—Ç—Ä–æ"
    await query.edit_message_text(new_text, reply_markup=None)


def main():
    # –°–æ–∑–¥–∞–µ–º Application —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    app = Application.builder() \
        .token(TOKEN) \
        .arbitrary_callback_data(True) \
        .build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()